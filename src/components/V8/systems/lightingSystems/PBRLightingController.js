import * as THREE from 'three';

/**
 * PBRLightingController - Solution Hybride Option 3
 * Syst√®me de presets d'√©clairage avec contr√¥les temps r√©el
 * Optimis√© pour mat√©riaux PBR import√©s de Blender
 */
export class PBRLightingController {
  constructor(scene, renderer, existingLights = null) {
    this.scene = scene;
    this.renderer = renderer;
    this.isInitialized = false;
    
    // ‚úÖ COORDINATION : Utiliser lumi√®res existantes de useThreeScene
    this.lights = existingLights || {
      ambient: null,
      directional: null
    };
    
    // ‚úÖ PRESETS D'√âCLAIRAGE - Option 3
    this.presets = {
      sombre: {
        name: 'Sombre (V6 Actuel)',
        ambient: { intensity: 0.8, color: 0x404040 },
        directional: { intensity: 0.8, color: 0xffffff },
        exposure: 1.0,
        toneMapping: THREE.LinearToneMapping,
        description: '√âclairage faible actuel V6'
      },
      normal: {
        name: 'Normal (√âquilibr√©)',
        ambient: { intensity: 1.5, color: 0x404040 },
        directional: { intensity: 2.0, color: 0xffffff },
        exposure: 1.0,
        toneMapping: THREE.LinearToneMapping,
        description: '√âclairage √©quilibr√© (+87%)'
      },
      lumineux: {
        name: 'Lumineux (√âlev√©)',
        ambient: { intensity: 2.5, color: 0x404040 },
        directional: { intensity: 3.5, color: 0xffffff },
        exposure: 1.1,
        toneMapping: THREE.ACESFilmicToneMapping,
        description: '√âclairage lumineux (+337%)'
      },
      pbr: {
        name: 'PBR Optimis√© (Blender-like)',
        ambient: { intensity: 3.0, color: 0x404040 },
        directional: { intensity: 4.5, color: 0xffffff },
        exposure: 1.2,
        toneMapping: THREE.ACESFilmicToneMapping,
        description: '√âclairage PBR optimis√© (+462%)'
      }
    };
    
    // ‚úÖ √âTAT ACTUEL
    this.currentPreset = 'sombre';
    this.customMultipliers = {
      ambient: 1.0,
      directional: 1.0
    };
    
    // ‚úÖ POSITIONS LUMI√àRES OPTIMALES
    this.lightPositions = {
      directional: new THREE.Vector3(2, 4, 5)
    };
  }
  
  /**
   * Initialise le syst√®me d'√©clairage PBR
   */
  init() {
    try {
      this.createLights();
      this.applyPreset('sombre'); // D√©marrer avec l'√©clairage actuel
      this.isInitialized = true;
      console.log('‚úÖ PBRLightingController initialis√© avec presets:', Object.keys(this.presets));
      return true;
    } catch (error) {
      console.error('‚ùå Erreur initialisation PBRLightingController:', error);
      return false;
    }
  }
  
  /**
   * Configure les lumi√®res (existantes ou nouvelles)
   */
  createLights() {
    // ‚úÖ COORDINATION : Si lumi√®res d√©j√† fournies, les utiliser
    if (this.lights.ambient && this.lights.directional) {
      console.log('üí° Lumi√®res coordonn√©es de useThreeScene r√©utilis√©es');
      return;
    }
    
    // ‚úÖ FALLBACK : CHERCHER LES LUMI√àRES EXISTANTES si pas fournies
    this.scene.traverse((child) => {
      if (child.isAmbientLight && !this.lights.ambient) {
        this.lights.ambient = child;
        console.log('üîç Lumi√®re ambiante existante trouv√©e et r√©utilis√©e');
      }
      if (child.isDirectionalLight && !this.lights.directional) {
        this.lights.directional = child;
        console.log('üîç Lumi√®re directionnelle existante trouv√©e et r√©utilis√©e');
      }
    });
    
    // ‚úÖ CR√âER SEULEMENT SI ELLES N'EXISTENT PAS
    if (!this.lights.ambient) {
      this.lights.ambient = new THREE.AmbientLight(0x404040, 0.8);
      this.lights.ambient.name = 'PBR_AmbientLight';
      this.scene.add(this.lights.ambient);
      console.log('üí° Nouvelle lumi√®re ambiante cr√©√©e');
    }
    
    if (!this.lights.directional) {
      this.lights.directional = new THREE.DirectionalLight(0xffffff, 0.8);
      this.lights.directional.name = 'PBR_DirectionalLight';
      this.lights.directional.position.copy(this.lightPositions.directional);
      this.lights.directional.castShadow = false; // Performance
      this.scene.add(this.lights.directional);
      console.log('üí° Nouvelle lumi√®re directionnelle cr√©√©e');
    }
    
    console.log('‚úÖ Lumi√®res PBR configur√©es:', {
      ambient: this.lights.ambient ? 'OK' : 'MANQUANTE',
      directional: this.lights.directional ? 'OK' : 'MANQUANTE'
    });
  }
  
  /**
   * Applique un preset d'√©clairage
   */
  applyPreset(presetName) {
    if (!this.presets[presetName]) {
      console.warn(`‚ùå Preset "${presetName}" non trouv√©`);
      return false;
    }
    
    const preset = this.presets[presetName];
    this.currentPreset = presetName;
    
    // ‚úÖ APPLIQUER INTENSIT√âS DE BASE
    if (this.lights.ambient) {
      this.lights.ambient.intensity = preset.ambient.intensity;
      this.lights.ambient.color.setHex(preset.ambient.color);
    }
    
    if (this.lights.directional) {
      this.lights.directional.intensity = preset.directional.intensity;
      this.lights.directional.color.setHex(preset.directional.color);
    }
    
    // ‚úÖ APPLIQUER TONE MAPPING & EXPOSURE
    this.renderer.toneMapping = preset.toneMapping;
    this.renderer.toneMappingExposure = preset.exposure;
    
    console.log(`üéõÔ∏è Preset "${preset.name}" appliqu√©:`, {
      ambient: preset.ambient.intensity,
      directional: preset.directional.intensity,
      exposure: preset.exposure,
      toneMapping: preset.toneMapping === THREE.ACESFilmicToneMapping ? 'ACES' : 'Linear'
    });
    
    return true;
  }
  
  /**
   * Ajuste les multipliers globaux temps r√©el
   */
  setGlobalMultipliers(ambientMult = 1.0, directionalMult = 1.0) {
    this.customMultipliers.ambient = ambientMult;
    this.customMultipliers.directional = directionalMult;
    
    // ‚úÖ APPLIQUER AVEC MULTIPLIERS
    const preset = this.presets[this.currentPreset];
    
    if (this.lights.ambient) {
      this.lights.ambient.intensity = preset.ambient.intensity * ambientMult;
    }
    
    if (this.lights.directional) {
      this.lights.directional.intensity = preset.directional.intensity * directionalMult;
    }
    
    console.log(`üîß Multipliers appliqu√©s: Ambient√ó${ambientMult.toFixed(1)}, Directional√ó${directionalMult.toFixed(1)}`);
  }
  
  /**
   * Obtient les informations du preset actuel
   */
  getCurrentPresetInfo() {
    return {
      name: this.currentPreset,
      preset: this.presets[this.currentPreset],
      multipliers: this.customMultipliers,
      finalIntensities: {
        ambient: this.lights.ambient?.intensity || 0,
        directional: this.lights.directional?.intensity || 0
      }
    };
  }
  
  /**
   * Liste tous les presets disponibles
   */
  getAvailablePresets() {
    return Object.keys(this.presets).map(key => ({
      key,
      name: this.presets[key].name,
      description: this.presets[key].description
    }));
  }
  
  /**
   * Ajuste l'exposure en temps r√©el
   */
  setExposure(value) {
    const clampedValue = Math.max(0.1, Math.min(3.0, value));
    this.renderer.toneMappingExposure = clampedValue;
    console.log(`üì∏ Exposure ajust√©e: ${clampedValue.toFixed(1)}`);
  }
  
  /**
   * Change le tone mapping
   */
  setToneMapping(mapping) {
    const mappings = {
      'linear': THREE.LinearToneMapping,
      'aces': THREE.ACESFilmicToneMapping,
      'reinhard': THREE.ReinhardToneMapping
    };
    
    if (mappings[mapping]) {
      this.renderer.toneMapping = mappings[mapping];
      console.log(`üé® Tone mapping chang√©: ${mapping.toUpperCase()}`);
    }
  }
  
  /**
   * Nettoie les ressources - NE SUPPRIME PAS les lumi√®res existantes
   */
  dispose() {
    // ‚úÖ ON NE SUPPRIME PAS les lumi√®res de la sc√®ne car elles peuvent √™tre partag√©es
    // On se contente de remettre les r√©f√©rences √† null
    if (this.lights.ambient && this.lights.ambient.name === 'PBR_AmbientLight') {
      // Seulement si c'est une lumi√®re qu'on a cr√©√©e nous-m√™mes
      this.scene.remove(this.lights.ambient);
    }
    this.lights.ambient = null;
    
    if (this.lights.directional && this.lights.directional.name === 'PBR_DirectionalLight') {
      // Seulement si c'est une lumi√®re qu'on a cr√©√©e nous-m√™mes
      this.scene.remove(this.lights.directional);
    }
    this.lights.directional = null;
    
    this.isInitialized = false;
    console.log('üßπ PBRLightingController nettoy√© (lumi√®res partag√©es pr√©serv√©es)');
  }
  
  /**
   * Informations de d√©bogage
   */
  getDebugInfo() {
    return {
      initialized: this.isInitialized,
      currentPreset: this.currentPreset,
      multipliers: this.customMultipliers,
      lightIntensities: {
        ambient: this.lights.ambient?.intensity || 0,
        directional: this.lights.directional?.intensity || 0
      },
      renderer: {
        toneMapping: this.renderer.toneMapping,
        exposure: this.renderer.toneMappingExposure
      }
    };
  }
}